// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
    // output        = "../node_modules/.prisma/client"
    // output        = "./prisma-client"
}

datasource db {
    provider = "mongodb"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(auto()) @map("_id") @db.ObjectId
    userId                   String  @db.ObjectId
    type                     String
    provider                 String
    providerAccountId        String  @map("provider_account_id")
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    refresh_token_expires_in Int?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Blog {
    id               String    @id @default(auto()) @map("_id") @db.ObjectId
    owner            User      @relation("OwnerRelation", fields: [ownerId], references: [id])
    ownerId          String    @db.ObjectId
    createdAt        DateTime  @default(now())
    updatedAt        DateTime?
    updatedBy        User?     @relation("UpdatedByRelation", fields: [updatedById], references: [id])
    updatedById      String?   @db.ObjectId
    publishedAt      DateTime?
    publishedBy      User?     @relation("PublishedByRelation", fields: [publishedById], references: [id])
    publishedById    String?   @db.ObjectId
    scheduledAt      DateTime?
    imageUrl         String?
    title            String?
    desc             String?
    keywords         String[]
    slug             String
    name             String?
    thumb            String?
    intro            String?
    content          String?
    titleNoUnicode   String?
    contentNoUnicode String?
    viewCount        Int       @default(0)
    tags             String[] // If you want to store tags as an array of strings

    readerIds String[] @db.ObjectId
    readers   User[]   @relation("BlogToReaders", fields: [readerIds], references: [id])

    @@index([ownerId], name: "idx_blog_ownerId")
    @@index([updatedById], name: "idx_blog_updatedById")
    @@index([publishedById], name: "idx_blog_publishedById")
}

model User {
    id                String     @id @default(auto()) @map("_id") @db.ObjectId
    providerAccountId String     @unique
    name              String?
    email             String?
    emailOriginal     String?
    emailVerified     DateTime?
    image             String?
    sessions          Session[]
    Account           Account[]
    userRoles         UserRole[]

    // Blogs
    ownedBlogs     Blog[] @relation("OwnerRelation")
    updatedBlogs   Blog[] @relation("UpdatedByRelation")
    publishedBlogs Blog[] @relation("PublishedByRelation")

    readBlogIds String[] @db.ObjectId
    readBlogs   Blog[]   @relation("BlogToReaders", fields: [readBlogIds], references: [id])

    // Products
    ownedProducts     Product[] @relation("OwnerRelation")
    updatedProducts   Product[] @relation("UpdatedByRelation")
    publishedProducts Product[] @relation("PublishedByRelation")

    voteProductIds String[]  @db.ObjectId
    voteProducts   Product[] @relation("ProductToVoters", fields: [readBlogIds], references: [id])
}

model Role {
    id              String           @id @default(auto()) @map("_id") @db.ObjectId
    name            String           @unique
    roleUsers       UserRole[]
    rolePermissions RolePermission[]
}

model Permission {
    id              String           @id @default(auto()) @map("_id") @db.ObjectId
    name            String           @unique
    rolePermissions RolePermission[]
}

// Intermediary table for User-Role many-to-many relationship
model UserRole {
    id     String @id @default(auto()) @map("_id") @db.ObjectId
    userId String @db.ObjectId
    roleId String @db.ObjectId
    user   User   @relation(fields: [userId], references: [id])
    role   Role   @relation(fields: [roleId], references: [id])

    @@unique([userId, roleId])
}

// Intermediary table for Role-Permission many-to-many relationship
model RolePermission {
    id           String     @id @default(auto()) @map("_id") @db.ObjectId
    roleId       String     @db.ObjectId
    permissionId String     @db.ObjectId
    role         Role       @relation(fields: [roleId], references: [id])
    permission   Permission @relation(fields: [permissionId], references: [id])

    @@unique([roleId, permissionId])
}

model ProductCategory {
    id          String    @id @default(auto()) @map("_id") @db.ObjectId
    createdAt   DateTime  @default(now())
    updatedAt   DateTime?
    publishedAt DateTime?
    scheduledAt DateTime?

    name     String
    slug     String
    desc     String?
    thumb    String?
    imageUrl String?

    productIds String[]  @db.ObjectId
    products   Product[] @relation("ProductToCategories", fields: [productIds], references: [id])
}

model Product {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    owner         User      @relation("OwnerRelation", fields: [ownerId], references: [id])
    ownerId       String    @db.ObjectId
    createdAt     DateTime  @default(now())
    updatedAt     DateTime?
    updatedBy     User?     @relation("UpdatedByRelation", fields: [updatedById], references: [id])
    updatedById   String?   @db.ObjectId
    publishedAt   DateTime?
    publishedBy   User?     @relation("PublishedByRelation", fields: [publishedById], references: [id])
    publishedById String?   @db.ObjectId
    scheduledAt   DateTime?

    url              String
    name             String?
    slug             String   @unique
    title            String?
    intro            String?
    desc             String?
    keywords         String[]
    content          String?
    titleNoUnicode   String?
    contentNoUnicode String?
    imageUrl         String?
    thumb            String?
    images           String[] @default([])
    tags             String[] @default([]) // Hashtags: #productivity, #ceo, #marketing,...
    viewCount        Int      @default(0)

    // categories
    categories  ProductCategory[] @relation("ProductToCategories", fields: [categoryIds], references: [id])
    categoryIds String[]          @db.ObjectId

    rank      Int?
    voterIds  String[] @db.ObjectId
    voters    User[]   @relation("ProductToVoters", fields: [voterIds], references: [id])
    voteCount Int      @default(0)

    @@index([ownerId], name: "idx_product_ownerId")
    @@index([updatedById], name: "idx_product_updatedById")
    @@index([publishedById], name: "idx_product_publishedById")
}
