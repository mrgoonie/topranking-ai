name: Release All Workflow

# TRIGGERS
on:
  push:
    branches:
      - main
      - beta

# ENVIRONMENT VARIABLES
env:
  GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
#   BRANCH_NAME: ${{ github.head_ref || github.ref }}

# CI/CD STEPS
jobs:
  release:
    name: Release GITHUB
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.CI_GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        id: pnpm-install
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install package dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Build source code
        run: pnpm build

      - name: Release GITHUB & NPM
        run: npx semantic-release
      
      - name: Update "package.json" version
        run: pnpm pkg-version

      - name: Commit and push latest "package.json" file
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "chore(package.json): update version [skip ci]"
          commit_options: '--allow-empty --no-verify --signoff'
  deploy:
    name: Release GITHUB
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to TopRanking.AI
        uses: digitopvn/diginext-actions@v0
        with:
        #   dx_version: 3.21.2-prerelease.7
          workspace_url: https://topgroup-v2.diginext.site
          api_key: ${{ secrets.DX_API_KEY }}
          cluster: tose
          registry: gcloud
          deploy_env: prod
          port: "3000"
